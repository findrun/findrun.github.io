[{"title":"mysql优化建议","url":"/2019/08/09/mysql优化建议/","content":"## 1、EXPLAIN\n做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。\n\n* type列，连接类型。一个好的SQL语句至少要达到range级别。杜绝出现all级别\n* key列，使用到的索引名。如果没有选择索引，值是NULL。可以采取强制索引方式。\n* key_len列，索引长度。\n* rows列，扫描行数。该值是个预估值。\n* extra列，详细说明。注意，常见的不太友好的值，如下：Using filesort，Using temporary。\n\n## 2、SQL语句中IN包含的值不应过多\nMySQL对于IN做了相应的优化，即将IN中的常量全部存储在一个数组里面，而且这个数组是排好序的。但是如果数值较多，产生的消耗也是比较大的。再例如：select id from t where num in(1,2,3) 对于连续的数值，能用between就不要用in了；再或者使用连接来替换。\n\n## 3、SELECT语句务必指明字段名称\nSELECT * 增加很多不必要的消耗（CPU、IO、内存、网络带宽）；增加了使用覆盖索引的可能性；当表结构发生改变时，前断也需要更新。所以要求直接在select后面接上字段名。\n\n## 4、当只需要一条数据的时候，使用limit 1\n这是为了使EXPLAIN中type列达到const类型\n\n## 5、如果排序字段没有用到索引，就尽量少排序\n\n## 6、如果限制条件中其他字段没有索引，尽量少用or\nor两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成该查询不走索引的情况。很多时候使用union all或者是union（必要的时候）的方式来代替“or”会得到更好的效果。\n\n## 7、尽量用union all代替union\nunion和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。\n\n## 8、不使用ORDER BY RAND()\n```\nselect id from `dynamic` order by rand() limit 1000;\n上面的SQL语句，可优化为：\nselect id from `dynamic` t1 join (select rand() * (select max(id) from `dynamic`) as nid) t2 on t1.id > t2.nidlimit 1000;\n```\n\n## 9、区分in和exists、not in和not exists\n```\nselect * from 表A where id in (select id from 表B)\n上面SQL语句相当于：\nselect * from 表A where exists(select * from 表B where 表B.id=表A.id)\n```\n区分in和exists主要是造成了驱动顺序的改变（这是性能变化的关键），如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询。所以IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。\n\n关于not in和not exists，推荐使用not exists，不仅仅是效率问题，not in可能存在逻辑问题。如何高效的写出一个替代not exists的SQL语句？\n\n```\n原SQL语句：\nselect colname … from A表 where a.id not in (select b.id from B表)\n高效的SQL语句：\nselect colname … from A表 Left join B表 on where a.id = b.id where b.id is null\n取出的结果集为A表不在B表中的数据\n```\n\n## 10、使用合理的分页方式以提高分页的效率\n```\nselect id,name from product limit 866613, 20\n使用上述SQL语句做分页的时候，可能有人会发现，随着表数据量的增加，直接使用limit分页查询会越来越慢。\n优化的方法如下：可以取前一页的最大行数的id，然后根据这个最大的id来限制下一页的起点。比如此列中，上一页最大的id是866612。SQL可以采用如下的写法：\nselect id,name from product where id> 866612 limit 20\n```\n\n## 11、分段查询\n在一些用户选择页面中，可能一些用户选择的时间范围过大，造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段进行查询，循环遍历，将结果合并处理进行展示。\n\n## 12、避免在where子句中对字段进行null值判断\n对于null的判断会导致引擎放弃使用索引而进行全表扫描。\n\n## 13、不建议使用%前缀模糊查询\n例如LIKE“%name”或者LIKE“%name%”，这种查询会导致索引失效而进行全表扫描。但是可以使用LIKE “name%”。\n\n虽然给secret字段添加了索引，但在explain结果并没有使用\n\n那么如何解决这个问题呢，答案：使用全文索引。\n\n在我们查询中经常会用到select id,fnum,fdst from dynamic_201606 where user_name like '%zhangsan%'; 。这样的语句，普通索引是无法满足查询需求的。庆幸的是在MySQL中，有全文索引来帮助我们。\n\n```\n创建全文索引的SQL语法是：\nALTER TABLE `dynamic_201606` ADD FULLTEXT INDEX `idx_user_name` (`user_name`);\n使用全文索引的SQL语句是：\nselect id,fnum,fdst from dynamic_201606 where match(user_name) against('zhangsan' in boolean mode);\n注意：在需要创建全文索引之前，请联系DBA确定能否创建。同时需要注意的是查询语句的写法与普通索引的区别。\n```\n\n## 14、避免在where子句中对字段进行表达式操作\n```\n比如：\nselect user_id,user_project from user_base where age*2=36;\n中对字段就行了算术运算，这会造成引擎放弃使用索引，建议改成：\nselect user_id,user_project from user_base where age=36/2;\n```\n\n## 15、避免隐式类型转换\nwhere子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换，建议先确定where中的参数类型。\n\n## 16、对于联合索引来说，要遵守最左前缀法则\n举列来说索引含有字段id、name、school，可以直接用id字段，也可以id、name这样的顺序，但是name;school都无法使用这个索引。所以在创建联合索引的时候一定要注意索引字段顺序，常用的查询字段放在最前面。\n\n## 17、必要时可以使用force index来强制查询走某个索引\n有的时候MySQL优化器采取它认为合适的索引来检索SQL语句，但是可能它所采用的索引并不是我们想要的。这时就可以采用forceindex来强制优化器使用我们制定的索引。\n\n## 18、注意范围查询语句\n对于联合索引来说，如果存在范围查询，比如between、>、<等条件时，会造成后面的索引字段失效。\n\n## 19、关于JOIN优化\nEFT JOIN A表为驱动表，INNER JOIN MySQL会自动找出那个数据少的表作用驱动表，RIGHT JOIN B表为驱动表。\n\n```\n注意：\n1）MySQL中没有full join，可以用以下方式来解决：\nselect * from A left join B on B.name = A.namewhere B.name is nullunion allselect * from B;\n2）尽量使用inner join，避免left join：\n参与联合查询的表至少为2张表，一般都存在大小之分。如果连接方式是inner join，在没有其他过滤条件的情况下MySQL会自动选择小表作为驱动表，但是left join在驱动表的选择上遵循的是左边驱动右边的原则，即left join左边的表名为驱动表。\n3）合理利用索引：\n被驱动表的索引字段作为on的限制字段。\n4）利用小表去驱动大表：\n如果能够减少驱动表的话，减少嵌套循环中的循环次数，以减少 IO总量及CPU运算的次数。\n5）巧用STRAIGHT_JOIN：\ninner join是由MySQL选择驱动表，但是有些特殊情况需要选择另个表作为驱动表，比如有group by、order by等「Using filesort」、「Using temporary」时。STRAIGHT_JOIN来强制连接顺序，在STRAIGHT_JOIN左边的表名就是驱动表，右边则是被驱动表。在使用STRAIGHT_JOIN有个前提条件是该查询是内连接，也就是inner join。其他链接不推荐使用STRAIGHT_JOIN，否则可能造成查询结果不准确。\n    SELECT `rl`.`fid`,\n        `rl`.`update_time` as `add_time`,\n        `f`.`fnum`,\n        `f`.`dst_parking`,\n        `f`.`aircraft_num`,\n        `f`.`touch_down_runway`,\n        `f`.`forg`,\n        `f`.`fdst`,\n        `f`.`flight_status_code`,\n        `fd`.`fdst` as `fd_fdst`,\n        `ds`.`touch_down_runway_source`,\n        `ds`.`touch_down_runway_update_time`,\n        `u`.`truename`,\n        `a`.`aircraft_model`\n    FROM `goms_flight_runway_log` as `rl`\n    STRAIGHT_JOIN `goms_flight` as `f` ON `rl`.`fid` = `f`.`fid`\n    LEFT JOIN `goms_aircraft` as `a` ON `f`.`aircraft_num` = `a`.`aircraft_num`\n    LEFT JOIN `goms_flight_link` as `fl` ON `f`.`fid` = `fl`.`arr_fid`\n    LEFT JOIN `goms_flight` as `fd` ON `fl`.`dept_fid` = `fd`.`fid`\n    LEFT JOIN `goms_flight_field_data_source` as `ds` ON `f`.`fid` = `ds`.`fid`\n    LEFT JOIN `goms_user` as `u` ON `ds`.`touch_down_runway_source` = `u`.`uid`\n    WHERE `rl`.`op_type` = 0\n        AND `f`.`fdst` = 'PVG'\n        AND `f`.`fid` != ''\n    GROUP BY `rl`.`fid`\n    ORDER BY `rl`.`update_time` DESC\n    LIMIT 20\n```\n这个方式有时能减少3倍的时间。","tags":["mysql"]},{"title":"mysql中日期相关操作","url":"/2019/08/09/mysql中日期相关操作/","content":"## 字符串和日期相互转换\n```\n字符串转时间：STR_TO_DATE('2017-08-29 00:00:00','%Y-%m-%d %H:%i:%s')\n时间转字符串：DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%s')\n各符号代表的意义：\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）  \n%Y 年, 数字, 4 位  \n%y 年, 数字, 2 位  \n%a 缩写的星期名字(Sun……Sat)  \n%d 月份中的天数, 数字(00……31)  \n%e 月份中的天数, 数字(0……31)  \n%m 月, 数字(01……12)  \n%c 月, 数字(1……12)  \n%b 缩写的月份名字(Jan……Dec)  \n%j 一年中的天数(001……366)  \n%H 小时(00……23)  \n%k 小时(0……23)  \n%h 小时(01……12)  \n%I 小时(01……12)  \n%l 小时(1……12)  \n%i 分钟, 数字(00……59)  \n%r 时间,12 小时(hh:mm:ss [AP]M)  \n%T 时间,24 小时(hh:mm:ss)  \n%S 秒(00……59)  \n%s 秒(00……59)  \n%p AM或PM  \n%w 一个星期中的天数(0=Sunday ……6=Saturday ）  \n%U 星期(0……52), 这里星期天是星期的第一天  \n%u 星期(0……52), 这里星期一是星期的第一天\n```\n\n## mysql日期加减操作\n1.为日期增加一个时间间隔：DATE_ADD()。\n```\nset @dt = now();\n\nselect date_add(@dt, interval 1 day);        -- add 1 day\nselect date_add(@dt, interval 1 hour);       -- add 1 hour\nselect date_add(@dt, interval 1 minute);     -- ...\nselect date_add(@dt, interval 1 second);\nselect date_add(@dt, interval 1 microsecond);\nselect date_add(@dt, interval 1 week);\nselect date_add(@dt, interval 1 month);\nselect date_add(@dt, interval 1 quarter);\nselect date_add(@dt, interval 1 year);\n\nselect date_add(@dt, interval -1 day);       -- sub 1 day\n```\n\n2.为日期减去一个时间间隔：DATE_SUB()，用法与DATE_ADD()一致。\n\n3.日期、时间相减函数：DATEDIFF(date1, date2)，TIMEDIFF(time1, time2)。\n```\nDATEDIFF(date1, date2)：两个日期相减date1-date2，返回天数。\nTIMEDIFF(time1, time2)：两个时间相减time1-time2，返回time差值。\n\nselect timediff('2008-08-08 08:08:08', '2008-08-08 00:00:00'); -- 08:08:08\nselect timediff('08:08:08', '00:00:00');                       -- 08:08:08\n\n注意：timediff(time1,time2) 函数的两个参数类型必须相同。\n```\n\n## mysql横向展示\n```\nSELECT \n    stu_id,\n    SUM(IF(subject_id=1,score,0)) AS '语文',\n    SUM(IF(subject_id=2,score,0)) AS '数学',\n    SUM(IF(subject_id=3,score,0)) AS '英语'\nFROM \n    `t_score`\nGROUP BY \n    stu_id\n```","tags":["mysql"]},{"title":"学习相关网站","url":"/2019/08/08/学习相关网站/","content":"1.[Fiddler抓包工具总结](https://www.cnblogs.com/yyhh/p/5140852.html) --- https://www.cnblogs.com/yyhh/p/5140852.html\n\n2.[MDN学习网站](https://developer.mozilla.org/zh-CN/) --- https://developer.mozilla.org/zh-CN/\n\n3.[LeetCode算法学习网站](https://leetcode-cn.com/) --- https://leetcode-cn.com/\n\n4.[Extjs 教程](https://www.w3cschool.cn/extjs/) --- https://www.w3cschool.cn/extjs/\n\n5.[Elasticsearch: 权威指南](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html) --- https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\n\n6.[Python菜鸟驿站](https://www.runoob.com/python/python-tutorial.html) --- https://www.runoob.com/python/python-tutorial.html\n\n7.[word模板渲染](http://deepoove.com/poi-tl/) --- http://deepoove.com/poi-tl/\n\n8.[maven官网jar包查询地址](https://search.maven.org/) --- https://search.maven.org/","tags":["工作"]},{"title":"学习工作相关博客","url":"/2019/08/08/学习工作相关博客/","content":"## 大佬博客\n1.[光的传人](http://www.liu16.com/) --- http://www.liu16.com/\n\n2.[前端开发博客](http://caibaojian.com/) --- http://caibaojian.com/\n\n3.[石墨文档-趣味、实用网站合集](https://shimo.im/docs/MGT5VVS87hIantBA/read?tdsourcetag=s_pctim_aiomsg) --- https://shimo.im/docs/MGT5VVS87hIantBA/read?tdsourcetag=s_pctim_aiomsg\n\n4.[大神博客-张鑫旭的个人主页](https://www.zhangxinxu.com/) --- https://www.zhangxinxu.com/\n\n5.[思否](https://segmentfault.com/) --- https://segmentfault.com/\n\n6.[轩枫阁](https://www.xuanfengge.com/) --- https://www.xuanfengge.com/\n\n7.[程序猿DD](http://blog.didispace.com/) --- http://blog.didispace.com/\n\n\n## Python相关博客\n1.[Python爬虫博客](https://www.cnblogs.com/miqi1992/p/7841599.html) --- https://www.cnblogs.com/miqi1992/p/7841599.html\n\n2.[开篇！我也来谈谈爬虫](http://www.cnblogs.com/pspider/p/7040681.html) --- http://www.cnblogs.com/pspider/p/7040681.html","tags":["工作"]},{"title":"前端相关网站","url":"/2019/08/08/前端相关网站/","content":"1.[Vue.js](https://cn.vuejs.org/v2/api/) --- https://cn.vuejs.org/v2/api/\n\n2.[ElementUI](https://element.eleme.cn/#/zh-CN/component/message-box) --- https://element.eleme.cn/#/zh-CN/component/message-box\n\n3.[Bootstrap](https://www.bootcss.com/) --- https://www.bootcss.com/\n\n4.[Echarts图表设计](https://echarts.baidu.com/) --- https://echarts.baidu.com/\n\n5.[Layui](https://www.layui.com/) --- https://www.layui.com/\n\n6.[ProcessOn在线绘图](https://www.processon.com/) --- https://www.processon.com/\n\n7.[AxureUX.com交互原型设计](http://www.axureux.com/home/default.html) --- http://www.axureux.com/home/default.html\n\n8.[FusionCharts图表设计](https://www.fusioncharts.com/) --- https://www.fusioncharts.com/","tags":["工作"]},{"title":"生活相关网站","url":"/2019/08/08/生活相关网站/","content":"1.[广东政务服务网](http://www.gdzwfw.gov.cn/) --- http://www.gdzwfw.gov.cn/","tags":["生活"]},{"title":"git的安装和使用","url":"/2019/08/07/git的安装和使用/","content":"# Git的安装\n## 在Window上安装Git\n在Windows上使用Git，可以从Git官网直接[下载安装程序](https://git-scm.com/downloads)，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。\n\n安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n\n## 在Linux上安装Git\n首先，你可以试着输入git，看看系统有没有安装Git：\n```\n$ git\nThe program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git\n```\n像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。\n\n如果你碰巧用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以直接完成Git的安装，非常简单。\n\n老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。\n\n如果是其他Linux版本，可以直接通过源码安装。先从[Git官网](https://git-scm.com/downloads)下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。\n\n\n# Git的使用\n## 基础操作\n### 工作区和暂存区的区别\n```\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。\n```\n\n### git init\n```\n创建版本库。版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n首先，选择一个合适的地方，创建一个空目录。\n第二步，通过git init命令把这个目录变成Git可以管理的仓库。\n```\n\n### git add\n```\n把文件添加到暂存区。\n```\n\n### git commit\n```\ngit commit -m \"提交注释\"\n提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n```\n\n### git status\n```\n查看是否还有文件未提交。\n```\n\n### git diff\n```\n查看待提交文件中有什么修改。\n```\n\n### git log\n```\n显示从最近到最远的提交日志。\n```\n\n### git reset\n```\n版本回退。\n回退到上一个版本：git reset --hard HEAD^\n回退到上上个版本：git reset --hard HEAD^^\n回退到前100个版本：git reset --hard HEAD~100\n直接回退到某个版本，可用git reflog查看过往所有版本：git reset --hard 6fcfc89\n```\n\n### git reflog\n```\n查看过往所有版本记录。\n```\n\n### git checkout -- [filename]\n```\n放弃工作区的修改。\n注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。\n```\n\n## 远程仓库\n### 添加远程库\n```\n先有本地库，后有远程库的时候，如何关联远程库。\n可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n要关联一个远程库，使用命令：git remote add origin git@github.com:[Github账户名]/learngit.git\n```\n\n### 从远程库克隆\n```\n假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n远程库已经准备好了，下一步是用命令git clone克隆一个本地库：git clone [giturl]\n拉取私有库：git clone [username]:[password]@[giturl]\n```\n\n### git push\n```\n把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\ngit push -u origin master第一次推送master分支的所有内容\n此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改\n```\n\n### git pull\n```\n拉取远程仓库最新的文件。\n```\n\n## 分支管理\n### 创建与合并分支\n创建dev分支，然后切换到dev分支\n```\ngit checkout -b dev\n相当于：\ngit branch dev //创建dev分支\ngit checkout dev //切换到dev分支\n```\n查看当前分支\n```\ngit branch //命令会列出所有分支，当前分支前面会标一个*号\n```\n合并分支\n```\ngit merge dev //合并dev分支到当前分支\n```\n删除分支\n```\ngit branch -d dev\n```\n\n### 解决冲突\n当master分支和feature1分支各自都分别有新的提交，这时候必须手动解决冲突，修改之后保存再提交。\n\n# Git Bash不能显示中文\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n* 解决办法\ngit bash 终端输入命令：\n```\ngit config --global core.quotepath false\n```\n要注意的是，这样设置后，你的git bash终端也要设置成中文和utf-8编码，才能正确显示中文。\n\n在git bash的界面中右击空白处，弹出菜单，选择选项->文本->本地Locale，设置为zh_CN，而旁边的字符集选框选为UTF-8。\n\n英文显示则是： Options->Text->Locale改为zh_CN，Character set改为UTF-8","tags":["git"]},{"title":"linux常用命令","url":"/2019/08/06/linux常用命令/","content":"# 基础命令\n\n## 删除文件或目录\n```\nrm -f xxx 删除某个文件\nrm -r xxx 删除某个空的目录\nrm -rf xxx 删除该目录及其下所有文件和目录\n```\n\n## 解压\n```\n只介绍常用的几个：\ntar zxvf [filename].tar\ngunzip [filename].gz\ngzip -d [filename].gz\ntar zxvf [filename].tar.gz\nunzip [filename].zip\n```\n\n## 压缩\n```\ntar czvf [filename].tar [dir]\ntar czvf [filename].tar [dir1] [dir2] [dir3] ... //可压缩多个文件或目录\nzip [filename].zip [dir]\n```\n\n## 移动\n```\nmv [options] source dest\n    -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件\n    -f: 在mv操作要覆盖某已有的目标文件时不给任何指示\n```\n\n## 复制\n```\ncp [options] source dest\n    -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合\n    -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式\n    -f：覆盖已经存在的目标文件而不给出提示\n    -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答\"y\"时目标文件将被覆盖\n    -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中\n    -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件\n    -l：不复制文件，只是生成链接文件\n```\n\n## 查询日志\n```\nless [options] filename\n1.全屏导航\n    ctrl + F - 向前移动一屏\n    ctrl + B - 向后移动一屏\n    ctrl + D - 向前移动半屏\n    ctrl + U - 向后移动半屏\n2.单行导航\n    j - 向前移动一行\n    k - 向后移动一行\n3.其它导航\n    G - 移动到最后一行\n    g - 移动到第一行\n    q / ZZ - 退出 less 命令\n```\n\n## 查看进程\n```\nps [options]\n    -A 列出所有的行程\n    -w 显示加宽可以显示较多的资讯\n    -au 显示较详细的资讯\n    -aux 显示所有包含其他使用者的行程\n    PID: pid\n    %CPU: 占用的 CPU 使用率\n    %MEM: 占用的记忆体使用率\n    VSZ: 占用的虚拟记忆体大小\n    RSS: 占用的记忆体大小\n```","tags":["linux"]},{"title":"hexo常用命令","url":"/2019/08/06/hexo常用命令/","content":"## init\n```\nhexo init [folder]\n```\n新建一个网站，如果没有设置folder，Hexo默认在当前文件夹建立网站。\n\n## new\n```\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置layout，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用双引号括起来。\n```\nhexo new \"post title\"\n```\n\n## generate\n```\nhexo generate\n可简写为 hexo g\n```\n生成静态文件。\n\n| 选项 | 描述 |\n| :----: | :----: |\n| -d，--deploy | 文件生成后立即部署网站 |\n| -w，--watch | 监视文件变动 |\n\n## publish\n```\nhexo publish [layout] <filename>\n```\n发表草稿\n\n## server\n```\nhexo server\n可简写为 hexo s\n```\n启动服务器。默认情况下访问地址为http://localhost:4000\n\n选项 | 描述\n:----: | :----:\n-p，--port | 重设端口\n-s，--static | 只使用静态文件\n-l，--log | 启动日记记录，使用覆盖记录格式\n\n## deploy\n```\nhexo deploy\n可简写为 hexo d\n```\n部署网站。\n\n参数 | 描述\n:----: | :----:\n-g，--generate | 部署之前预先生成静态文件\n\n## clean\n```\nhexo clean\n```\n清除缓存文件（db.json）和已生成的静态文件（public）。\n\n**暂时用到的就这些，以后再添加。**","tags":["hexo"]},{"title":".gitignore和.gitmodules的使用","url":"/2019/08/05/gitignore和-gitmodules的使用/","content":"## .gitignore文件的使用\n开发中常遇到不需要跟踪的文件或文件夹，包括不限于编译生成的文件(如.pyc)、调试结果(如rst文件夹)等,原则是不想让其被看到，此时可使用\".gitignore\"文件进行管理。如下所示：\n```\nnode_modules/\npublic/\n.deploy*/\n```\n\n## .gitignore文件的使用\n从git官网上down了个开源代码，在此基础上开发出适合项目需求的程序，如果不想重复的上传别人的代码，此时需要将新添加的程序和改动的程序利用git保存，同时利用\".gitimodules\"指明依赖的程序地址。如下所示：\n```\n[submodule \"themes/aircloud\"]\n    path = themes/aircloud\n    url = https://github.com/aircloud/hexo-theme-aircloud\n```\n子模块使用时可通过以下命令拉取：\n```\ngit submodule update --init\n```","tags":["git"]},{"title":"简单完美","url":"/2018/08/09/简单完美/","content":"\n## 龙珠合成公式\n```\n低级龙珠合成到高级的公式：\n2星＝1星×4＝4个1星龙珠\n3星＝2星×2＋1星×2＝10个1星龙珠\n4星＝3星×2＋1星×1＋2星×1＝25个1星龙珠\n5星＝4星×2＋3星×1＝60个1星龙珠\n6星＝5星×2＋3星×1＝130个1星龙珠\n7星＝4星×1＋5星×1＋6星×1＝215个1星龙珠\n8星＝5星×1＋6星×1＋7星×1＝405个1星龙珠\n9星＝6星×1＋7星×1＋8星×1＝750个1星龙珠\n10星＝7星×1＋8星×1＋9星×1＝1370个1星龙珠\n11星＝8星×1＋9星×1＋10星×1＝2525个1星龙珠\n12星＝9星×1＋10星×1＋11星×1＝4645个1星龙珠\n```","tags":["游戏"]},{"title":"游戏相关网站","url":"/2018/08/08/游戏相关网站/","tags":["游戏"]}]