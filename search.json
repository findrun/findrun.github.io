[{"title":"git的安装和使用","url":"/2019/08/07/git的安装和使用/","content":"# Git的安装\n## 在Window上安装Git\n在Windows上使用Git，可以从Git官网直接[下载安装程序](https://git-scm.com/downloads)，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。\n\n安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n\n## 在Linux上安装Git\n首先，你可以试着输入git，看看系统有没有安装Git：\n```\n$ git\nThe program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git\n```\n像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。\n\n如果你碰巧用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以直接完成Git的安装，非常简单。\n\n老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。\n\n如果是其他Linux版本，可以直接通过源码安装。先从[Git官网](https://git-scm.com/downloads)下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。\n\n\n# Git的使用\n## 基础操作\n### 工作区和暂存区的区别\n```\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。\n```\n\n### git init\n```\n创建版本库。版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n首先，选择一个合适的地方，创建一个空目录。\n第二步，通过git init命令把这个目录变成Git可以管理的仓库。\n```\n\n### git add\n```\n把文件添加到暂存区。\n```\n\n### git commit\n```\ngit commit -m \"提交注释\"\n提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n```\n\n### git status\n```\n查看是否还有文件未提交。\n```\n\n### git diff\n```\n查看待提交文件中有什么修改。\n```\n\n### git log\n```\n显示从最近到最远的提交日志。\n```\n\n### git reset\n```\n版本回退。\n回退到上一个版本：git reset --hard HEAD^\n回退到上上个版本：git reset --hard HEAD^^\n回退到前100个版本：git reset --hard HEAD~100\n直接回退到某个版本，可用git reflog查看过往所有版本：git reset --hard 6fcfc89\n```\n\n### git reflog\n```\n查看过往所有版本记录。\n```\n\n### git checkout -- [filename]\n```\n放弃工作区的修改。\n注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。\n```\n\n## 远程仓库\n### 添加远程库\n```\n先有本地库，后有远程库的时候，如何关联远程库。\n可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n要关联一个远程库，使用命令：git remote add origin git@github.com:[Github账户名]/learngit.git\n```\n\n### 从远程库克隆\n```\n假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n远程库已经准备好了，下一步是用命令git clone克隆一个本地库：git clone [giturl]\n```\n\n### git push\n```\n把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\ngit push -u origin master第一次推送master分支的所有内容\n此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改\n```\n\n# Git Bash不能显示中文\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n* 解决办法\ngit bash 终端输入命令：\n```\ngit config --global core.quotepath false\n```\n要注意的是，这样设置后，你的git bash终端也要设置成中文和utf-8编码，才能正确显示中文。\n\n在git bash的界面中右击空白处，弹出菜单，选择选项->文本->本地Locale，设置为zh_CN，而旁边的字符集选框选为UTF-8。\n\n英文显示则是： Options->Text->Locale改为zh_CN，Character set改为UTF-8","tags":["git"]},{"title":"linux常用命令","url":"/2019/08/06/linux常用命令/","content":"# 基础命令\n\n## 删除文件或目录\n```\nrm -f xxx 删除某个文件\nrm -r xxx 删除某个空的目录\nrm -rf xxx 删除该目录及其下所有文件和目录\n```\n\n## 解压\n```\n只介绍常用的几个：\ntar zxvf [filename].tar\ngunzip [filename].gz\ngzip -d [filename].gz\ntar zxvf [filename].tar.gz\nunzip [filename].zip\n```\n\n## 压缩\n```\ntar czvf [filename].tar [dir]\ntar czvf [filename].tar [dir1] [dir2] [dir3] ... //可压缩多个文件或目录\nzip [filename].zip [dir]\n```\n\n## 移动\n```\nmv [options] source dest\n    -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件\n    -f: 在mv操作要覆盖某已有的目标文件时不给任何指示\n```\n\n## 复制\n```\ncp [options] source dest\n    -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合\n    -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式\n    -f：覆盖已经存在的目标文件而不给出提示\n    -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答\"y\"时目标文件将被覆盖\n    -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中\n    -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件\n    -l：不复制文件，只是生成链接文件\n```\n\n## 查询日志\n```\nless [options] filename\n1.全屏导航\n    ctrl + F - 向前移动一屏\n    ctrl + B - 向后移动一屏\n    ctrl + D - 向前移动半屏\n    ctrl + U - 向后移动半屏\n2.单行导航\n    j - 向前移动一行\n    k - 向后移动一行\n3.其它导航\n    G - 移动到最后一行\n    g - 移动到第一行\n    q / ZZ - 退出 less 命令\n```\n\n## 查看进程\n```\nps [options]\n    -A 列出所有的行程\n    -w 显示加宽可以显示较多的资讯\n    -au 显示较详细的资讯\n    -aux 显示所有包含其他使用者的行程\n    PID: pid\n    %CPU: 占用的 CPU 使用率\n    %MEM: 占用的记忆体使用率\n    VSZ: 占用的虚拟记忆体大小\n    RSS: 占用的记忆体大小\n```","tags":["linux"]},{"title":"hexo常用命令","url":"/2019/08/06/hexo常用命令/","content":"## init\n```\nhexo init [folder]\n```\n新建一个网站，如果没有设置folder，Hexo默认在当前文件夹建立网站。\n\n## new\n```\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置layout，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用双引号括起来。\n```\nhexo new \"post title\"\n```\n\n## generate\n```\nhexo generate\n可简写为 hexo g\n```\n生成静态文件。\n\n| 选项 | 描述 |\n| :----: | :----: |\n| -d，--deploy | 文件生成后立即部署网站 |\n| -w，--watch | 监视文件变动 |\n\n## publish\n```\nhexo publish [layout] <filename>\n```\n发表草稿\n\n## server\n```\nhexo server\n可简写为 hexo s\n```\n启动服务器。默认情况下访问地址为http://localhost:4000\n\n选项 | 描述\n:----: | :----:\n-p，--port | 重设端口\n-s，--static | 只使用静态文件\n-l，--log | 启动日记记录，使用覆盖记录格式\n\n## deploy\n```\nhexo deploy\n可简写为 hexo d\n```\n部署网站。\n\n参数 | 描述\n:----: | :----:\n-g，--generate | 部署之前预先生成静态文件\n\n## clean\n```\nhexo clean\n```\n清除缓存文件（db.json）和已生成的静态文件（public）。\n\n**暂时用到的就这些，以后再添加。**","tags":["hexo"]},{"title":".gitignore和.gitmodules的使用","url":"/2019/08/05/gitignore和-gitmodules的使用/","content":"## .gitignore文件的使用\n开发中常遇到不需要跟踪的文件或文件夹，包括不限于编译生成的文件(如.pyc)、调试结果(如rst文件夹)等,原则是不想让其被看到，此时可使用\".gitignore\"文件进行管理。如下所示：\n```\nnode_modules/\npublic/\n.deploy*/\n```\n\n## .gitignore文件的使用\n从git官网上down了个开源代码，在此基础上开发出适合项目需求的程序，如果不想重复的上传别人的代码，此时需要将新添加的程序和改动的程序利用git保存，同时利用\".gitimodules\"指明依赖的程序地址。如下所示：\n```\n[submodule \"themes/aircloud\"]\n    path = themes/aircloud\n    url = https://github.com/aircloud/hexo-theme-aircloud\n```\n子模块使用时可通过以下命令拉取：\n```\ngit submodule update --init\n```","tags":["git"]},{"title":"centOS7.2搭建nginx环境以及负载均衡","url":"/2016/08/03/centOS7-2搭建nginx环境以及负载均衡/","content":" 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。\n\n前置工作就不赘述了，首先`ssh root@115.29.102.81` (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：\n\n**1.添加资源**\n\n添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):\n\n```\nsudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n\n```\n\n**2.安装Nginx**\n\n在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：\n>*这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装*\n```\nsudo yum install -y nginx\n```\nNginx将完成安装在你的CentOS 7 服务器中。\n\n**3.启动Nginx**\n\n刚安装的Nginx不会自行启动。运行Nginx:\n```\nsudo systemctl start nginx.service\n```\n如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面\n\n>当然，这里一般很可能会无法访问的。\n\n我们先不急于解决我们的问题，先看看nginx的基本配置：\n\n\nNginx配置信息\n```\n网站文件存放默认目录\n\n/usr/share/nginx/html\n网站默认站点配置\n\n/etc/nginx/conf.d/default.conf\n自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。\n\n/etc/nginx/conf.d/\nNginx全局配置\n\n/etc/nginx/nginx.conf\n在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。\n```\nLinux查看公网IP\n\n您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)\n```\nip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'\n```\n___\n好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。\n\n这个时候首先看看配置文件default.conf对不对，一个正确的例子：\n(域名要先进行解析到响应的IP)\n```\nserver {\n    listen       80;\n    server_name  nginx.310058.cn;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/log/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n确定文件没问题了，看看这个时候是不是开启了nginx进程：\n\n```\n ps -ef | grep nginx\n```\n\n应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。\n\n这个时候接下来再试试在服务器上：\n```\nping  115.29.102.81\ntelnet 115.29.102.81 80\nwget nginx.310058.cn\n```\n如果有的命令没有就直接yum安装下:\n```\nyum -y install telnet\n```\n如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：\n```\nbrew install wget\n```\n\n发现很可能本机telnet不通，而服务器telnet通。\n这个时候就是**防火墙**的问题。\n\n####centos7.2防火墙\n\n由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。\n\n查看下防火墙状态：\n```\n[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  \n● firewalld.service - firewalld - dynamic firewall daemon\n   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago\n Main PID: 424 (firewalld)\n   CGroup: /system.slice/firewalld.service\n           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid\n\nAug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...\nAug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.\n```\n\n增加80端口的权限：\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent  \n```\n \n 别忘了更新防火墙的配置：\n```\nfirewall-cmd --reload\n```\n这个时候再`restart  nginx.service` 一下就会发现应该好了。\n\n\nnginx 停止：\n\n```\nservice nginx restart\n也可以重启nginx\n\nkill -QUIT 进程号  \n#从容停止\n\nkill -TERM 进程号\n#或者\nkill -INT 进程号\n#快速停止\n\np-kill -9 nginx\n强制停止\n\nnginx -t \n#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）\n\nnginx -s reload\n#重启\n\nkill -HUP 进程号\n#重启的另外一种方式\n```\n\n官方文档地址：\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\n\n附1:一个简单的负载均衡的实现:\nweight默认是1，自己也可以更改。\n```\nupstream mypro {\n\t\t\t\tip_hash;\n                server 111.13.100.92 weight=2;\n                server 183.232.41.1;\n                server 42.156.140.7;\n                }\n\n        server {\n                listen 8090;\n                location / {\n                proxy_pass http://mypro;\n                }\n        }\n\n```\n\n\n附2:防火墙基本学习：\n\n``` \n\n1、firewalld简介\nfirewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念\n \nfirewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍\n \nfirewalld的字符界面管理工具是 firewall-cmd \n \nfirewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）\n \nzone概念：\n硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：\ndrop：默认丢弃所有包\nblock：拒绝所有外部连接，允许内部发起的连接\npublic：指定外部连接可以进入\nexternal：这个不太明白，功能上和上面相同，允许指定的外部连接\ndmz：和硬件防火墙一样，受限制的公共连接可以进入\nwork：工作区，概念和workgoup一样，也是指定的外部连接允许\nhome：类似家庭组\ninternal：信任所有连接\n对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点\n \n2、安装firewalld\nroot执行 # yum install firewalld firewall-config\n \n3、运行、停止、禁用firewalld\n启动：# systemctl start  firewalld\n查看状态：# systemctl status firewalld 或者 firewall-cmd --state\n停止：# systemctl disable firewalld\n禁用：# systemctl stop firewalld\n \n4、配置firewalld\n查看版本：$ firewall-cmd --version\n查看帮助：$ firewall-cmd --help\n查看设置：\n                显示状态：$ firewall-cmd --state\n                查看区域信息: $ firewall-cmd --get-active-zones\n                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0\n拒绝所有包：# firewall-cmd --panic-on\n取消拒绝状态：# firewall-cmd --panic-off\n查看是否拒绝：$ firewall-cmd --query-panic\n \n更新防火墙规则：# firewall-cmd --reload\n                            # firewall-cmd --complete-reload\n    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n \n将接口添加到区域，默认接口都在public\n# firewall-cmd --zone=public --add-interface=eth0\n永久生效再加上 --permanent 然后reload防火墙\n \n设置默认接口区域\n# firewall-cmd --set-default-zone=public\n立即生效无需重启\n \n打开端口（貌似这个才最常用）\n查看所有打开的端口：\n# firewall-cmd --zone=dmz --list-ports\n加入一个端口到区域：\n# firewall-cmd --zone=dmz --add-port=8080/tcp\n若要永久生效方法同上\n \n打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\n# firewall-cmd --zone=work --add-service=smtp\n \n移除服务\n# firewall-cmd --zone=work --remove-service=smtp\n \n还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习\n\n```\n","tags":["nginx"]}]