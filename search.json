[{"title":"生活相关网站","url":"/2019/08/08/生活相关网站/","content":"```\n广东政务服务网 --- http://www.gdzwfw.gov.cn/\n```","tags":["相关网站"]},{"title":"git的安装和使用","url":"/2019/08/07/git的安装和使用/","content":"# Git的安装\n## 在Window上安装Git\n在Windows上使用Git，可以从Git官网直接[下载安装程序](https://git-scm.com/downloads)，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。\n\n安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n\n## 在Linux上安装Git\n首先，你可以试着输入git，看看系统有没有安装Git：\n```\n$ git\nThe program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git\n```\n像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。\n\n如果你碰巧用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以直接完成Git的安装，非常简单。\n\n老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。\n\n如果是其他Linux版本，可以直接通过源码安装。先从[Git官网](https://git-scm.com/downloads)下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。\n\n\n# Git的使用\n## 基础操作\n### 工作区和暂存区的区别\n```\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。\n```\n\n### git init\n```\n创建版本库。版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n首先，选择一个合适的地方，创建一个空目录。\n第二步，通过git init命令把这个目录变成Git可以管理的仓库。\n```\n\n### git add\n```\n把文件添加到暂存区。\n```\n\n### git commit\n```\ngit commit -m \"提交注释\"\n提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n```\n\n### git status\n```\n查看是否还有文件未提交。\n```\n\n### git diff\n```\n查看待提交文件中有什么修改。\n```\n\n### git log\n```\n显示从最近到最远的提交日志。\n```\n\n### git reset\n```\n版本回退。\n回退到上一个版本：git reset --hard HEAD^\n回退到上上个版本：git reset --hard HEAD^^\n回退到前100个版本：git reset --hard HEAD~100\n直接回退到某个版本，可用git reflog查看过往所有版本：git reset --hard 6fcfc89\n```\n\n### git reflog\n```\n查看过往所有版本记录。\n```\n\n### git checkout -- [filename]\n```\n放弃工作区的修改。\n注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。\n```\n\n## 远程仓库\n### 添加远程库\n```\n先有本地库，后有远程库的时候，如何关联远程库。\n可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n要关联一个远程库，使用命令：git remote add origin git@github.com:[Github账户名]/learngit.git\n```\n\n### 从远程库克隆\n```\n假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n远程库已经准备好了，下一步是用命令git clone克隆一个本地库：git clone [giturl]\n```\n\n### git push\n```\n把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\ngit push -u origin master第一次推送master分支的所有内容\n此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改\n```\n\n### git pull\n```\n拉取远程仓库最新的文件。\n```\n\n## 分支管理\n### 创建与合并分支\n创建dev分支，然后切换到dev分支\n```\ngit checkout -b dev\n相当于：\ngit branch dev //创建dev分支\ngit checkout dev //切换到dev分支\n```\n查看当前分支\n```\ngit branch //命令会列出所有分支，当前分支前面会标一个*号\n```\n合并分支\n```\ngit merge dev //合并dev分支到当前分支\n```\n删除分支\n```\ngit branch -d dev\n```\n\n### 解决冲突\n当master分支和feature1分支各自都分别有新的提交，这时候必须手动解决冲突，修改之后保存再提交。\n\n# Git Bash不能显示中文\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n* 解决办法\ngit bash 终端输入命令：\n```\ngit config --global core.quotepath false\n```\n要注意的是，这样设置后，你的git bash终端也要设置成中文和utf-8编码，才能正确显示中文。\n\n在git bash的界面中右击空白处，弹出菜单，选择选项->文本->本地Locale，设置为zh_CN，而旁边的字符集选框选为UTF-8。\n\n英文显示则是： Options->Text->Locale改为zh_CN，Character set改为UTF-8","tags":["git"]},{"title":"linux常用命令","url":"/2019/08/06/linux常用命令/","content":"# 基础命令\n\n## 删除文件或目录\n```\nrm -f xxx 删除某个文件\nrm -r xxx 删除某个空的目录\nrm -rf xxx 删除该目录及其下所有文件和目录\n```\n\n## 解压\n```\n只介绍常用的几个：\ntar zxvf [filename].tar\ngunzip [filename].gz\ngzip -d [filename].gz\ntar zxvf [filename].tar.gz\nunzip [filename].zip\n```\n\n## 压缩\n```\ntar czvf [filename].tar [dir]\ntar czvf [filename].tar [dir1] [dir2] [dir3] ... //可压缩多个文件或目录\nzip [filename].zip [dir]\n```\n\n## 移动\n```\nmv [options] source dest\n    -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件\n    -f: 在mv操作要覆盖某已有的目标文件时不给任何指示\n```\n\n## 复制\n```\ncp [options] source dest\n    -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合\n    -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式\n    -f：覆盖已经存在的目标文件而不给出提示\n    -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答\"y\"时目标文件将被覆盖\n    -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中\n    -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件\n    -l：不复制文件，只是生成链接文件\n```\n\n## 查询日志\n```\nless [options] filename\n1.全屏导航\n    ctrl + F - 向前移动一屏\n    ctrl + B - 向后移动一屏\n    ctrl + D - 向前移动半屏\n    ctrl + U - 向后移动半屏\n2.单行导航\n    j - 向前移动一行\n    k - 向后移动一行\n3.其它导航\n    G - 移动到最后一行\n    g - 移动到第一行\n    q / ZZ - 退出 less 命令\n```\n\n## 查看进程\n```\nps [options]\n    -A 列出所有的行程\n    -w 显示加宽可以显示较多的资讯\n    -au 显示较详细的资讯\n    -aux 显示所有包含其他使用者的行程\n    PID: pid\n    %CPU: 占用的 CPU 使用率\n    %MEM: 占用的记忆体使用率\n    VSZ: 占用的虚拟记忆体大小\n    RSS: 占用的记忆体大小\n```","tags":["linux"]},{"title":"hexo常用命令","url":"/2019/08/06/hexo常用命令/","content":"## init\n```\nhexo init [folder]\n```\n新建一个网站，如果没有设置folder，Hexo默认在当前文件夹建立网站。\n\n## new\n```\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置layout，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用双引号括起来。\n```\nhexo new \"post title\"\n```\n\n## generate\n```\nhexo generate\n可简写为 hexo g\n```\n生成静态文件。\n\n| 选项 | 描述 |\n| :----: | :----: |\n| -d，--deploy | 文件生成后立即部署网站 |\n| -w，--watch | 监视文件变动 |\n\n## publish\n```\nhexo publish [layout] <filename>\n```\n发表草稿\n\n## server\n```\nhexo server\n可简写为 hexo s\n```\n启动服务器。默认情况下访问地址为http://localhost:4000\n\n选项 | 描述\n:----: | :----:\n-p，--port | 重设端口\n-s，--static | 只使用静态文件\n-l，--log | 启动日记记录，使用覆盖记录格式\n\n## deploy\n```\nhexo deploy\n可简写为 hexo d\n```\n部署网站。\n\n参数 | 描述\n:----: | :----:\n-g，--generate | 部署之前预先生成静态文件\n\n## clean\n```\nhexo clean\n```\n清除缓存文件（db.json）和已生成的静态文件（public）。\n\n**暂时用到的就这些，以后再添加。**","tags":["hexo"]},{"title":".gitignore和.gitmodules的使用","url":"/2019/08/05/gitignore和-gitmodules的使用/","content":"## .gitignore文件的使用\n开发中常遇到不需要跟踪的文件或文件夹，包括不限于编译生成的文件(如.pyc)、调试结果(如rst文件夹)等,原则是不想让其被看到，此时可使用\".gitignore\"文件进行管理。如下所示：\n```\nnode_modules/\npublic/\n.deploy*/\n```\n\n## .gitignore文件的使用\n从git官网上down了个开源代码，在此基础上开发出适合项目需求的程序，如果不想重复的上传别人的代码，此时需要将新添加的程序和改动的程序利用git保存，同时利用\".gitimodules\"指明依赖的程序地址。如下所示：\n```\n[submodule \"themes/aircloud\"]\n    path = themes/aircloud\n    url = https://github.com/aircloud/hexo-theme-aircloud\n```\n子模块使用时可通过以下命令拉取：\n```\ngit submodule update --init\n```","tags":["git"]}]